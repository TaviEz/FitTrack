@page "/split-overview"
@page "/split-overview/{Id:int}"

@inject DataContext Context
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationState
@inject UserManager<ApplicationUser> UserManager
@inject INotificationMessage NotifcationMessage

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<head>
    <script src="https://kit.fontawesome.com/8d42c9993f.js" crossorigin="anonymous"></script>
</head>

<PageTitle>Split Overview</PageTitle>

@if (Id is null)
{
    <p><em>Loading workouts...</em></p>
}
else
{
    <div class="p-3">
        <div class="control-section toast-default-section">
            <SfToast ID="toast_default" @ref="ToastObj" Timeout="2000">
                <ToastPosition X="Center"></ToastPosition>
            </SfToast>
        </div>
        <InputText class="form-control w-auto" @bind-Value="@CurrentWorkoutSplit.Name" @onblur="WorkoutSplitNameChanged" />
        <table class="table">
            <thead>
                <tr>
                    <th>
                        <div class="dropdown mb-1">
                            <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Select the workout split
                            </button>

                            <div class="dropdown-menu">
                                @foreach (var workoutSplit in WorkoutSplits)
                                {
                                    <button class="dropdown-item" type="button" @onclick="() => SelectWorkoutSplit(workoutSplit)">
                                        @workoutSplit.Name
                                    </button>
                                }
                            </div>
                        </div>

                        <button class="btn btn-primary" @onclick="() => AddWorkoutSplit()">
                            New workout split
                        </button>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var workout in CurrentWorkoutSplit.Workouts)
                {
                    <tr>
                        <td>
                            @workout.Name
                        </td>
                        <td><a href="edit-workout/@workout.Id">Edit</a></td>
                        <td>
                            <button type="submit" class="btn btn-outline-danger" @onclick="() => RemoveWorkout(workout)">
                                <span><i class="fa-regular fa-trash-can"></i></span>
                            </button>
                        </td>
                        <td>
                            <input type="checkbox" @onchange="eventArgs => CheckBox_Changed(workout, eventArgs.Value ?? false)" checked="@workout.IsCompleted" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <button type="submit" class="btn btn-primary" @onclick="AddWorkout">Add workout</button>
        <button type="button" class="btn btn-primary" @onclick="() => DeleteWorkoutSplit()">Delete workout split</button>
    </div>
}


@code {
    [Parameter]
    public int? Id { get; set; } = null;

    WorkoutSplit CurrentWorkoutSplit = new();

    public ApplicationUser CurrentUser = new();

    public List<WorkoutSplit> WorkoutSplits = new();

    int WorkoutsCompleted = 0;

    SfToast ToastObj = new();

    protected override async Task OnParametersSetAsync()
    {
        var authstate = await AuthenticationState.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authstate.User);

        if (user != null)
            CurrentUser = user;

        WorkoutSplits = await Context.WorkoutSplits
                .Where(ws => ws.ApplicationUserId == CurrentUser.Id)
                .Include(workoutSplit => workoutSplit.Workouts)
                .ThenInclude(workout => workout.ExerciseList)
                .ThenInclude(e => e.ExerciseSets)
                .ToListAsync();

        if (Id is not null)
        {
            var defaultWorkoutSplit = WorkoutSplits.FirstOrDefault(w => w.Id == Id);

            if (defaultWorkoutSplit != null)
                CurrentWorkoutSplit = defaultWorkoutSplit;
        }
        else
        {
            var firstWorkoutSplit = WorkoutSplits.FirstOrDefault();

            if (firstWorkoutSplit != null)
            {
                NavigationManager.NavigateTo($"split-overview/{firstWorkoutSplit.Id}");
            }

        }


        //count the number of workouts completed on initialization
        foreach(var workout in CurrentWorkoutSplit.Workouts)
        {
            if (workout.IsCompleted == true)
                WorkoutsCompleted += 1;
        }

    }

    async Task AddWorkoutSplit()
    {
        WorkoutSplit workoutSplitToAdd = new WorkoutSplit(userId: CurrentUser.Id);

        Context.WorkoutSplits.Add(workoutSplitToAdd);
        await Context.SaveChangesAsync();

        CurrentWorkoutSplit = workoutSplitToAdd;
        NavigationManager.NavigateTo($"/split-overview/{workoutSplitToAdd.Id}");
    }

    async Task AddWorkout()
    {
        Workout workoutToAdd = new Workout(workoutSplitId: 1);

        if (workoutToAdd != null)
        {
            Context.Workouts.Add(workoutToAdd);
            await Context.SaveChangesAsync();
            NavigationManager.NavigateTo($"/edit-workout/{workoutToAdd.Id}");
        }
    }

    async Task RemoveWorkout(Workout workout)
    {
        if(Context.Workouts.Contains(workout))
            Context.Workouts.Remove(workout);

        await Context.SaveChangesAsync();

        if (CurrentWorkoutSplit.Workouts.Contains(workout))
            CurrentWorkoutSplit.Workouts.Remove(workout);

    }

    void SelectWorkoutSplit(WorkoutSplit workoutSplit)
    {
        NavigationManager.NavigateTo($"/split-overview/{workoutSplit.Id}");    
    }

    async void DeleteWorkoutSplit()
    {
        Context.WorkoutSplits.Remove(CurrentWorkoutSplit);
        await Context.SaveChangesAsync();
    }

    async void WorkoutSplitNameChanged()
    {
        await Context.SaveChangesAsync();
    }

    private async Task CheckBox_Changed(Workout workout, object checkedValue)
    {
        if((bool)checkedValue == true)
        {
            workout.IsCompleted = true;
            await Context.SaveChangesAsync();

            //set completion date for each exercise in the workout
            SetExerciseDates(workout);

            WorkoutsCompleted += 1;
            CheckIfWorkoutSplitIsCompleted();

            await Context.SaveChangesAsync();
        }
        else
        {
            workout.IsCompleted = false;
            WorkoutsCompleted -= 1;
            await Context.SaveChangesAsync();
        }

    }

    private async void CheckIfWorkoutSplitIsCompleted()
    {
        if(WorkoutsCompleted == CurrentWorkoutSplit.Workouts.Count)
        {
            foreach(var workout in CurrentWorkoutSplit.Workouts)
            {
                workout.IsCompleted = false;
                WorkoutsCompleted -= 1;
                StateHasChanged();
            }

            NotifcationMessage.toastModelSuccessfull.Content = $"Congratulations!\n You have completed {CurrentWorkoutSplit.Name} workout split.";
            await this.ToastObj.ShowAsync(NotifcationMessage.toastModelSuccessfull);
        }
    }

    private void SetExerciseDates(Workout workout)
    {
        foreach(var exercise in workout.ExerciseList)
        {
            //Add only max records
            var set = GetMaxWeightPerExercise(exercise);
            var history = new ExerciseRecord(DateOnly.FromDateTime(DateTime.Today), set.Repetitions, set.Weight, set.ExerciseId);
            Context.ExerciseRecords.Add(history);
        }
    }

    private ExerciseSet GetMaxWeightPerExercise(Exercise exercise)
    {
        var max = new ExerciseSet(reps: 0, weight: 0, exerciseId: exercise.Id);

        foreach(var set in exercise.ExerciseSets)
        {
            // if set weight is > than the max then reinitialize max
            if (set.Weight > max.Weight || (set.Weight == max.Weight && set.Repetitions > max.Repetitions))
                max = set;
        }

        return max;
    }
}
