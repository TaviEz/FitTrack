@page "/split-overview"
@page "/split-overview/{Id:int}"

@inject DataContext Context
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationState
@inject UserManager<ApplicationUser> UserManager

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<head>
    <script src="https://kit.fontawesome.com/8d42c9993f.js" crossorigin="anonymous"></script>
</head>


<h3>@CurrentWorkoutSplit.Name</h3>

<PageTitle>Split Overview</PageTitle>

@if (Id is null)
{
    <p><em>Loading workouts...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    <div class="dropdown mb-1">
                        <button class="btn btn-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Select the workout split
                        </button>

                        <div class="dropdown-menu">
                            @foreach (var workoutSplit in WorkoutSplits)
                            {
                                <button class="dropdown-item" type="button" @onclick="() => Test()">
                                    @workoutSplit.Name
                                </button>
                            }
                        </div>
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var workout in CurrentWorkoutSplit.Workouts)
            {
                <tr>
                    <td>
                        @workout.Name
                    </td>
                    <td><a href="edit-workout/@workout.Id">Edit</a></td>
                    <td>
                        <button type="submit" class="btn btn-outline-danger" @onclick="() => RemoveWorkout(workout)">
                            <span><i class="fa-regular fa-trash-can"></i></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @*consider creating separate interactive compononents for the buttons*@
    <button type="submit" class="btn btn-primary" @onclick="AddWorkout">Add workout</button>
}


@*consider creating services to perform crud operations*@
@*add a message after each operation is performed Ex: Workout Saved Succesfully*@
@code {
    [Parameter]
    public int? Id { get; set; } = null;


    WorkoutSplit CurrentWorkoutSplit = new();

    public ApplicationUser CurrentUser = new();

    public List<WorkoutSplit> WorkoutSplits = new();

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            var authstate = await AuthenticationState.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authstate.User);

            if (user != null)
                CurrentUser = user;

            WorkoutSplits = await Context.WorkoutSplits
                .Where(ws => ws.ApplicationUserId == CurrentUser.Id)
                .Include(workoutSplit => workoutSplit.Workouts)
                .ThenInclude(workout => workout.ExerciseList)
                .ToListAsync();

            var workoutSplit = WorkoutSplits.FirstOrDefault();

            if(workoutSplit != null)
            {
                CurrentWorkoutSplit = workoutSplit;
            }
        }
    }

    async Task AddWorkout()
    {
        Workout workoutToAdd = new Workout(workoutSplitId: 1);

        if (workoutToAdd != null)
        {
            Context.Workouts.Add(workoutToAdd);
            await Context.SaveChangesAsync();
            NavigationManager.NavigateTo($"/edit-workout/{workoutToAdd.Id}");
        }

    }

    async Task RemoveWorkout(Workout workout)
    {
        if(Context.Workouts.Contains(workout))
            Context.Workouts.Remove(workout);

        await Context.SaveChangesAsync();

        if (CurrentWorkoutSplit.Workouts.Contains(workout))
            CurrentWorkoutSplit.Workouts.Remove(workout);

    }

    async void Test()
    {
        
    }
}
