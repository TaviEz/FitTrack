@page "/anatomic-model"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject DataContext Context;
@inject AuthenticationStateProvider AuthenticationState
@inject UserManager<ApplicationUser> UserManager
@inject INotificationMessage NotificationMessage


<PageTitle>Visualize anatomic model</PageTitle>


<div class="p-3">
    <div class="control-section toast-default-section">
        <SfToast ID="toast_default" @ref="ToastObj" Timeout="2000">
            <ToastPosition X="Center"></ToastPosition>
        </SfToast>
    </div>

    <button class="btn btn-primary mb-3" @onclick="ToggleAnatomicModelVisibility">Toggle View</button>

    <table>
        <tr>
            <td>
                @if (IsFrontModelVisible)
                {
                    <table cellspacing="0" cellpadding="0" style="border: none;">
                        <tbody>
                            <tr>
                                <td></td>
                                <td>
                                    <img src="@headImg" alt="head" />
                                </td>
                            </tr>
                            <tr>
                                <td style="display: flex; flex-direction: column;">
                                    <img class="muscleImage" src="@leftFrontShoulder" @onclick='() => GetAssociatedExercises(2, "Front shoulders")' alt="Front Shoulders" />
                                    <img class="muscleImage" src="@leftBicepsImg" @onclick='() => GetAssociatedExercises(3, "Biceps")' alt="Biceps" />
                                </td>
                                <td>
                                    <img class="muscleImage" src="@chestImg" @onclick='() => GetAssociatedExercises(1, "Chest")' alt="Chest" />
                                </td>
                                <td style="display: flex; flex-direction: column;">
                                    <img class="muscleImage" src="@rightFrontShoulder" @onclick='() => GetAssociatedExercises(2, "Front shoulders")' alt="Front Shoulders" />
                                    <img class="muscleImage" src="@rightBicepsImg" @onclick='() => GetAssociatedExercises(3, "Biceps")' alt="Biceps" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <img src="@leftForearmImg" />
                                </td>
                                <td>
                                    <img class="muscleImage" src="@absImg" @onclick='() => GetAssociatedExercises(4, "Abs")' alt="Abs" />
                                </td>
                                <td>
                                    <img src="@rightForearmImg" />
                                </td>
                            </tr>
                        </tbody>
                    </table>

                    <table cellspacing="0" cellpadding="0" style="border: none;">
                        <tbody>
                            <tr>
                                <td>
                                    <img class="muscleImage" src="@quadsImg" @onclick='() => GetAssociatedExercises(6, "Quads")' alt="Quads" />
                                    <img src="@tibieImg" />
                                </td>
                            </tr>
                        </tbody>
                    </table>

                }
                else
                {
                    <table cellspacing="0" cellpadding="0" style="border: none;">
                        <tbody>
                            <tr>
                                <td>
                                    <img class="muscleImage" src="@leftPostShoulder" @onclick='() => GetAssociatedExercises(5, "Posterior Shoulders")' alt="Posterior Shoulders" />
                                </td>
                                <td>
                                    <img class="muscleImage" src="@trapsImg" @onclick='() => GetAssociatedExercises(8, "Traps")' alt="Traps" />
                                </td>
                                <td>
                                    <img class="muscleImage" src="@rightPostShoulder" @onclick='() => GetAssociatedExercises(5, "Posterior Shoulders")' alt="Posterior Shoulders" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <img class="muscleImage" src="@leftTricepsImg" @onclick='() => GetAssociatedExercises(9, "Triceps")' alt="Triceps" />
                                </td>
                                <td>
                                    <img class="muscleImage" src="@backImg" @onclick='() => GetAssociatedExercises(7, "Back")' alt="Back" />
                                </td>
                                <td>
                                    <img class="muscleImage" src="@rightTricepsImg" @onclick='() => GetAssociatedExercises(9, "Triceps")' alt="Triceps" />
                                </td>
                            </tr>
                        </tbody>
                    </table>

                    <table cellspacing="0" cellpadding="0" style="border: none;">
                        <tbody>
                            <tr>
                                <td>
                                    <img class="muscleImage" src="@buttockImg" alt="Butt" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <img class="muscleImage" src="@hamsImg" @onclick='() => GetAssociatedExercises(10, "Hamstrings")' alt="Hamstrings" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <img class="muscleImage" src="@calvesImg" @onclick='() => GetAssociatedExercises(11, "Calves")' alt="Calves" />
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <img src="@ahileImg" alt="ahile" />
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
            </td>
            <td id="anatomicModel">
                <p id="anatomicModelDescription" class="mx-5">
                    After selecting an exercise, add it directly to your chosen workout split. Pick your preferred workout split, 
                    then select the workout to customize your training according to your goals.
                </p>

                <table class="table mx-5">
                    @if (!String.IsNullOrEmpty(SelectedMuscleGroup))
                    {
                        @if (Exercises.Count > 0)
                        {
                            <p>
                                Showing @SelectedMuscleGroup exercises
                            </p>
                        }

                        else if (Exercises.Count == 0)
                        {
                            <p>
                                Whoops, @SelectedMuscleGroup does not have any associated exercises.
                            </p>
                        }
                    }
                    <tbody>
                        @foreach (var exercise in Exercises)
                        {
                            <tr>
                                <td>@exercise.Name</td>
                                <td>@exercise.Description</td>
                                <td>
                                    <!-- Dropdown pentru alegerea workout split-ului -->
                                    <div class="dropdown mb-1">
                                        <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownWorkoutSplit" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">

                                            @if (!SelectedWorkoutSplit.ContainsKey(exercise.Id))
                                            {
                                                SelectedWorkoutSplit[exercise.Id] = DefaultWorkoutSplitName;

                                                @*daca nu exista o asociere intre dropdownul al doilea al exercitiului si vizibilitatea lui atunci o initializez cu fals*@
                                                @if (!IsButtonVisible.ContainsKey(exercise.Id))
                                                {
                                                    IsButtonVisible[exercise.Id] = false;
                                                }
                                            }
                                            @SelectedWorkoutSplit[exercise.Id]

                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownWorkoutSplit">
                                            <!-- Adauga fiecare workoutSplit in dropdown -->
                                            @foreach (var workoutSplit in WorkoutSplits)
                                            {
                                                <button class="dropdown-item" type="button" @onclick="() => AddToWorkoutSplit(workoutSplit, exercise.Id)">
                                                    @workoutSplit.Name
                                                </button>
                                            }

                                            @*Daca este selectat workout split atunci fac vizibil al doilea dropdown*@
                                            @if (SelectedWorkoutSplit[exercise.Id] != DefaultWorkoutSplitName)
                                            {
                                                IsButtonVisible[exercise.Id] = true;
                                            }
                                        </div>
                                    </div>

                                    <!-- Dropdown pentru alegerea workout-ului asociat workout split-ului selectat -->
                                    @if (IsButtonVisible[exercise.Id] == true)
                                    {
                                        <div class="dropdown mb-1">
                                            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownWorkout" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">

                                                @if (!SelectedWorkout.ContainsKey(exercise.Id))
                                                {
                                                    SelectedWorkout[exercise.Id] = DefaultWorkoutName;
                                                }
                                                @SelectedWorkout[exercise.Id]

                                            </button>

                                            <div class="dropdown-menu" aria-labelledby="dropdownWorkout" id="dropdownWorkoutMenu">
                                                @foreach (var workout in CorrespondingWorkouts)
                                                {

                                                    <button class="dropdown-item" type="button" @onclick="() => AddToWorkout(workout, exercise, SelectedWorkoutSplit[exercise.Id])">
                                                        @workout.Name
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </td>
        </tr>
    </table>
</div>


@code {
    #region constant strings
    private string headImg = string.Empty;

    private string leftFrontShoulder = string.Empty;

    private string leftBicepsImg = string.Empty;

    private string chestImg = string.Empty;

    private string rightFrontShoulder = string.Empty;

    private string rightBicepsImg = string.Empty;

    private string leftForearmImg = string.Empty;

    private string absImg = string.Empty;

    private string rightForearmImg = string.Empty;

    private string quadsImg = string.Empty;

    private string tibieImg = string.Empty;

    private string leftPostShoulder = string.Empty;

    private string trapsImg = string.Empty;

    private string rightPostShoulder = string.Empty;

    private string leftTricepsImg = string.Empty;

    private string backImg = string.Empty;

    private string rightTricepsImg = string.Empty;

    private string buttockImg = string.Empty;

    private string hamsImg = string.Empty;

    private string calvesImg = string.Empty;

    private string ahileImg = string.Empty;

    private string SelectedMuscleGroup = string.Empty;

    public string DefaultWorkoutSplitName = "Choose workout split";

    public string DefaultWorkoutName = "Choose workout";

    #endregion

    SfToast ToastObj;

    public ICollection<Exercise> Exercises = new List<Exercise>();

    public ICollection<WorkoutSplit> WorkoutSplits = new List<WorkoutSplit>();

    public ICollection<Workout> CorrespondingWorkouts = new List<Workout>();

    public Dictionary<int, string> SelectedWorkoutSplit = new Dictionary<int, string>();

    public Dictionary<int, string> SelectedWorkout = new Dictionary<int, string>();

    public Dictionary<int, bool> IsButtonVisible = new Dictionary<int, bool>();

    public ApplicationUser CurrentUser = new();

    private bool IsFrontModelVisible = true;

    protected override async Task OnInitializedAsync()
    {
        #region frontAnatomy
        var frontUpper = "images/frontAnatomy/upperModel/";

        headImg = frontUpper + "head.png";
        leftFrontShoulder = frontUpper + "leftFrontShoulder.png";
        leftBicepsImg = frontUpper + "leftBiceps.png";
        chestImg = frontUpper + "chest.png";
        rightFrontShoulder = frontUpper + "rightFrontShoulder.png";
        rightBicepsImg = frontUpper + "rightBiceps.png";
        leftForearmImg = frontUpper + "leftForearm.png";
        absImg = frontUpper + "abs.png";
        rightForearmImg = frontUpper + "rightForearm.png";

        var frontLower = "images/frontAnatomy/lowerModel/";
        quadsImg = frontLower + "quads.png";
        tibieImg = frontLower + "tibie.png";
        #endregion

        #region backAnatomy
        var backUpper = "images/backAnatomy/upperModel/";

        leftPostShoulder = backUpper + "leftPostShoulder.png";
        trapsImg = backUpper + "traps.png";
        rightPostShoulder = backUpper + "rightPostShoulder.png";
        leftTricepsImg = backUpper + "leftTriceps.png";
        backImg = backUpper + "back.png";
        rightTricepsImg = backUpper + "rightTriceps.png";

        var backLower = "images/backAnatomy/lowerModel/";
        buttockImg = backLower + "buttock.png";
        hamsImg = backLower + "hamstring.png";
        calvesImg = backLower + "calves.png";
        ahileImg = backLower + "ahile.png";
        #endregion

        var authstate = await AuthenticationState.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authstate.User);

        if (user != null)
            CurrentUser = user;

        WorkoutSplits = await Context.WorkoutSplits
        .Where(ws => ws.ApplicationUserId == CurrentUser.Id)
        .Include(workoutSplit => workoutSplit.Workouts).ToListAsync();
    }


    async Task GetAssociatedExercises(int muscleGroupId, string muscleGroup)
    {
        var exercises = await Context.Exercises
        .Where(exercise => exercise.Workout != null &&
            exercise.Workout.WorkoutSplit != null &&
            exercise.Workout.WorkoutSplit.ApplicationUserId == CurrentUser.Id &&
            exercise.MuscleGroups.Any(mg => mg.Id == muscleGroupId))
        .Include(exercise => exercise.MuscleGroups) // Include lista de grupe musculare asociate fiecărui exercițiu
        .ToListAsync();

        Exercises = exercises.DistinctBy(exercise => exercise.Name).ToList(); // elimin exercitiile cu acelasi nume

        SelectedMuscleGroup = muscleGroup;
    }

    private void AddToWorkoutSplit(WorkoutSplit workoutSplit, int id)
    {
        SelectedWorkoutSplit[id] = workoutSplit.Name;
        CorrespondingWorkouts = workoutSplit.Workouts;
    }

    private async void AddToWorkout(Workout workout, Exercise exercise, string workoutSplit)
    {
        SelectedWorkout[exercise.Id] = workout.Name;

        Exercise exerciseToAdd = new Exercise(workoutId: workout.Id);
        exerciseToAdd.Name = exercise.Name;
        exerciseToAdd.Description = exercise.Description;
        exerciseToAdd.MuscleGroups = exercise.MuscleGroups;

        workout.ExerciseList.Add(exerciseToAdd);
        await Context.SaveChangesAsync();

        NotificationMessage.toastModelSuccessfull.Content = $"{exercise.Name} was added to\n{workoutSplit}: {workout.Name}";
        await this.ToastObj.ShowAsync(NotificationMessage.toastModelSuccessfull);
    }

    private void ToggleAnatomicModelVisibility()
    {
        IsFrontModelVisible = !IsFrontModelVisible;
    }
}
