@page "/edit-workout"
@page "/edit-workout/{Id:int}"
@inject DataContext Context
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<head>
    <script src="https://kit.fontawesome.com/8d42c9993f.js" crossorigin="anonymous"></script>
</head>


<PageTitle>Edit @CurrentWorkout.Name</PageTitle>
<div class="form-floating mb-3">
    <InputText class="form-control" id="workoutName" @bind-Value="@CurrentWorkout.Name" placeholder="" />
    <label for="workoutName" class="form-control">Workout</label>
</div>


@if (Id is null)
{
    <p><em>Loading exercises...</em></p>
}
else
{
    <table class="table">
        <tbody>
            @foreach (var exercise in CurrentWorkout.ExerciseList)
            {
                <tr>
                    <td>
                        <div>
                            <button type="submit" class="btn btn-danger mb-2" @onclick="() => RemoveExercise(exercise)">Remove Exercise</button>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText class="form-control" placeholder="Exercise Name" @bind-Value="@exercise.Name" />
                            <label class="form-label">Exercise </label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText class="form-control" @bind-Value="@exercise.Description" />
                            <label class="form-label">Description</label>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => AddSet(exercise)">
                            <span><i class="fa-solid fa-plus"></i></span>
                        </button>
                    </td>
                </tr>

                @foreach (var set in exercise.ExerciseSets)
                {
                    <tr>
                        <td>set @countSet</td>
                        <td>
                            <InputNumber class="form-control" placeholder="Repetitions" @bind-Value="@set.Repetitions" />
                        </td>
                        <td>
                            <InputNumber class="form-control" placeholder="Weight" @bind-Value="@set.Weight" />
                        </td>
                        <td>
                            <button type="submit" class="btn btn-outline-danger" @onclick="() => RemoveSet(exercise, set)">
                                <span><i class="fa-regular fa-trash-can"></i></span>
                            </button>
                        </td>
                    </tr>
                    countSet++;
                }
                countSet = 1;
            }
        </tbody>
    </table>

    <button type="submit" class="btn btn-primary" @onclick="AddExercise">Add exercise</button>
    <button type="submit" class="btn btn-primary" @onclick="SaveWorkout">Save workout</button>

}

@code {
    [Parameter]
    public int? Id { get; set; } = null;

    public Workout CurrentWorkout { get; set; } = new();

    List<Exercise> exercises = new();

    int countSet = 1;

    protected override async Task OnParametersSetAsync()
    {
        if(Id is not null)
        {
            var workouts = await Context.Workouts
            .Include(workout => workout.ExerciseList)
                .ThenInclude(exercise => exercise.ExerciseSets)
            .ToListAsync();
            var workout = workouts.FirstOrDefault(w => w.Id == Id);

            if(workout is not null)
            {
                CurrentWorkout = workout;
            }
        }
    }

    async Task SaveWorkout()
    {
        var result = await Context.SaveChangesAsync();
    }

    async Task AddSet(Exercise exercise)
    {
        exercise.ExerciseSets.Add(new ExerciseSet(exercise.Id));
        await Context.SaveChangesAsync();
    }

    async Task RemoveSet(Exercise currentExercise, ExerciseSet currentSet)
    {
        currentExercise.ExerciseSets.Remove(currentSet);
        await Context.SaveChangesAsync();
    }

    async Task AddExercise()
    {
        Exercise exerciseToAdd = new Exercise(workoutId: Id);

        if (exerciseToAdd != null)
        {
            Context.Exercises.Add(exerciseToAdd);
        }

        await Context.SaveChangesAsync();
    }


    async Task RemoveExercise(Exercise exerciseToRemove)
    {
        Context.Exercises.Remove(exerciseToRemove);
        await Context.SaveChangesAsync();

        if(CurrentWorkout.ExerciseList != null)
            CurrentWorkout.ExerciseList.Remove(exerciseToRemove);
    }
}
