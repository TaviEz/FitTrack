@page "/edit-workout"
@page "/edit-workout/{Id:int}"

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject DataContext Context
@inject INotificationMessage NotificationMessage


<head>
    <script src="https://kit.fontawesome.com/8d42c9993f.js" crossorigin="anonymous"></script>
</head>


<PageTitle>Edit @CurrentWorkout.Name</PageTitle>


@if (Id is null)
{
    <p><em>Loading exercises...</em></p>
}
else
{
    <div class="control-section toast-default-section">
        <SfToast ID="toast_default" @ref="ToastObj" Timeout="2000">
            <ToastPosition X="Center"></ToastPosition>
        </SfToast>
    </div>
    <div class="p-3">
        <div class="mb-3">
            <InputText class="form-control w-auto" id="workoutName" @bind-Value="@CurrentWorkout.Name" />
        </div>

        <table class="table">
            <tbody>
                @foreach (var exercise in CurrentWorkout.ExerciseList)
                {
                    @if (SelectedMuscleGroups.Count == 0)
                    {
                        SelectedMuscleGroups = exercise.MuscleGroups;
                    }
                    <tr>
                        <td>
                            <div>
                                <button type="submit" class="btn btn-danger mb-2" @onclick="() => RemoveExercise(exercise)">Remove Exercise</button>
                            </div>
                            <div class="form-floating mb-3">
                                <InputText class="form-control" placeholder="Exercise Name" @bind-Value="@exercise.Name" />
                                <label class="form-label">Exercise </label>
                            </div>
                            <div class="form-floating mb-3">
                                <InputText class="form-control" @bind-Value="@exercise.Description" />
                                <label class="form-label">Description</label>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <SfMultiSelect @ref="MultiSelectMuscleGroup" TItem="MuscleGroup" TValue="List<MuscleGroup>" Placeholder="Select muscle group" DataSource="@MuscleGroups" EnableChangeOnBlur="false"
                                       @bind-Value="exercise.MuscleGroups">
                            <MultiSelectEvents TItem="MuscleGroup" TValue="List<MuscleGroup>" ValueChange="((e) => ModifyAssociatedMuscleGroups(e, exercise))"></MultiSelectEvents>
                            <MultiSelectFieldSettings Text="Name"></MultiSelectFieldSettings>
                        </SfMultiSelect>
                    </tr>
                    <tr>
                        <td>
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => AddSet(exercise)">
                                <span><i class="fa-solid fa-plus"></i></span>
                            </button>
                        </td>
                    </tr>

                    @foreach (var set in exercise.ExerciseSets)
                    {
                        <tr>
                            <td>set @countSet</td>
                            <td>
                                <div class="form-floating mb-3">
                                    <InputNumber class="form-control" placeholder="Repetitions" @bind-Value="@set.Repetitions" />
                                    <label class="form-label">Repetitions</label>
                                </div>
                            </td>
                            <td>
                                <div class="form-floating mb-3">
                                    <InputNumber class="form-control" placeholder="Weight" @bind-Value="@set.Weight" />
                                    <label class="form-label">Weight(kg)</label>
                                </div>
                            </td>
                            <td>
                                <button type="submit" class="btn btn-outline-danger" @onclick="() => RemoveSet(exercise, set)">
                                    <span><i class="fa-regular fa-trash-can"></i></span>
                                </button>
                            </td>
                        </tr>
                        countSet++;
                    }
                    countSet = 1;
                }
            </tbody>
        </table>

        <button type="submit" class="btn btn-primary" @onclick="AddExercise">Add exercise</button>
        <button type="submit" class="btn btn-primary" @onclick="SaveWorkout">Save workout</button>
    </div>
}

@code {

    #region SyncFusion controls

    SfToast ToastObj = new();

    SfMultiSelect<List<MuscleGroup>, MuscleGroup> MultiSelectMuscleGroup = new SfMultiSelect<List<MuscleGroup>, MuscleGroup>();

    #endregion


    List<MuscleGroup> SelectedMuscleGroups = new();

    [Parameter]
    public int? Id { get; set; } = null;

    public Workout CurrentWorkout { get; set; } = new();

    List<MuscleGroup> MuscleGroups = new();

    Dictionary<int, List<MuscleGroup>> ExerciseMuscleGroups = new Dictionary<int, List<MuscleGroup>>();

    int countSet = 1;

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var workouts = await Context.Workouts
                .Include(workout => workout.ExerciseList)
                    .ThenInclude(exercise => exercise.ExerciseSets)
                .Include(workout => workout.ExerciseList)
                    .ThenInclude(exercise => exercise.MuscleGroups)
                        .ThenInclude(muscleGroup => muscleGroup.AssociatedExcercises)
                .ToListAsync();

            var workout = workouts.FirstOrDefault(w => w.Id == Id);

            if (workout is not null)
            {
                CurrentWorkout = workout;
            }

            MuscleGroups = await Context.MuscleGroups.ToListAsync();
        }
    }


    async Task SaveWorkout()
    {
        var result = await Context.SaveChangesAsync();

        if(result != 0)
        {
            NotificationMessage.toastModelSuccessfull.Content = "Your workout has been saved successfully";
            await this.ToastObj.ShowAsync(NotificationMessage.toastModelSuccessfull);
        } 
    }

    async Task AddSet(Exercise exercise)
    {
        exercise.ExerciseSets.Add(new ExerciseSet(exercise.Id));
        await Context.SaveChangesAsync();
    }

    async Task RemoveSet(Exercise currentExercise, ExerciseSet currentSet)
    {
        currentExercise.ExerciseSets.Remove(currentSet);
        await Context.SaveChangesAsync();
    }

    async Task AddExercise()
    {
        Exercise exerciseToAdd = new Exercise(workoutId: Id);

        if (exerciseToAdd != null)
        {
            Context.Exercises.Add(exerciseToAdd);
        }

        await Context.SaveChangesAsync();

        NotificationMessage.toastModelSuccessfull.Content = "Successfully added an empty exercise";
        await this.ToastObj.ShowAsync(NotificationMessage.toastModelSuccessfull);
    }


    async Task RemoveExercise(Exercise exerciseToRemove)
    {
        Context.Exercises.Remove(exerciseToRemove);
        await Context.SaveChangesAsync();

        if(CurrentWorkout.ExerciseList != null)
            CurrentWorkout.ExerciseList.Remove(exerciseToRemove);

        NotificationMessage.toastModelSuccessfull.Content = $"Successfully removed {exerciseToRemove.Name}";
        await this.ToastObj.ShowAsync(NotificationMessage.toastModelSuccessfull);
    }

    async Task ModifyAssociatedMuscleGroups(MultiSelectChangeEventArgs<List<MuscleGroup>> args, Exercise e)
    {
        var newMuscleGroups = args.Value;
        var oldMuscleGroups = args.OldValue;

        // Daca nu exista grupuri musculare vechi, adaugam prima data
        if (oldMuscleGroups == null || oldMuscleGroups.Count == 0)
        {
            var addedItem = newMuscleGroups.FirstOrDefault();
            if (addedItem != null)
            {
                e.MuscleGroups.Add(addedItem);
                SelectedMuscleGroups = e.MuscleGroups;
                addedItem.AssociatedExcercises.Add(e);
            }
        }
        else
        {
            // Daca numarul de elemente a crescut, adaugam grupa musculara noua
            if (newMuscleGroups.Count > oldMuscleGroups.Count)
            {
                var addedItem = newMuscleGroups.Except(oldMuscleGroups).FirstOrDefault();
                if (addedItem != null)
                {
                    e.MuscleGroups.Add(addedItem);
                    addedItem.AssociatedExcercises.Add(e);
                }
            }
            // Daca numarul de elemente a scazut, elimina grupa musculara stearsa de utilizator
            else if (newMuscleGroups.Count < oldMuscleGroups.Count)
            {
                var removedItems= oldMuscleGroups.Except(newMuscleGroups).FirstOrDefault();
                if (removedItems != null)
                {
                    e.MuscleGroups.Remove(removedItems);
                    removedItems.AssociatedExcercises.Remove(e);
                }
            }
        }
        await Context.SaveChangesAsync();
    }
}
